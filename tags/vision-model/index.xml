<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>vision-model on Lil&#39;Log</title>
    <link>https://wuxb09.github.io/test-lilian/tags/vision-model/</link>
    <description>Recent content in vision-model on Lil&#39;Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Jun 2022 15:10:30 -0700</lastBuildDate><atom:link href="https://wuxb09.github.io/test-lilian/tags/vision-model/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generalized Visual Language Models</title>
      <link>https://wuxb09.github.io/test-lilian/posts/2022-06-09-vlm/</link>
      <pubDate>Thu, 09 Jun 2022 15:10:30 -0700</pubDate>
      
      <guid>https://wuxb09.github.io/test-lilian/posts/2022-06-09-vlm/</guid>
      <description>Processing images to generate text, such as image captioning and visual question-answering, has been studied for years. Traditionally such systems rely on an object detection network as a vision encoder to capture visual features and then produce text via a text decoder. Given a large amount of existing literature, in this post, I would like to only focus on one approach for solving vision language tasks, which is to extend pre-trained generalized language models to be capable of consuming visual signals.</description>
    </item>
    
    <item>
      <title>Object Detection Part 4: Fast Detection Models</title>
      <link>https://wuxb09.github.io/test-lilian/posts/2018-12-27-object-recognition-part-4/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wuxb09.github.io/test-lilian/posts/2018-12-27-object-recognition-part-4/</guid>
      <description>In Part 3, we have reviewed models in the R-CNN family. All of them are region-based object detection algorithms. They can achieve high accuracy but could be too slow for certain applications such as autonomous driving. In Part 4, we only focus on fast object detection models, including SSD, RetinaNet, and models in the YOLO family.
Links to all the posts in the series: [Part 1] [Part 2] [Part 3] [Part 4].</description>
    </item>
    
    <item>
      <title>Object Detection for Dummies Part 3: R-CNN Family</title>
      <link>https://wuxb09.github.io/test-lilian/posts/2017-12-31-object-recognition-part-3/</link>
      <pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wuxb09.github.io/test-lilian/posts/2017-12-31-object-recognition-part-3/</guid>
      <description>[Updated on 2018-12-20: Remove YOLO here. Part 4 will cover multiple fast object detection algorithms, including YOLO.]  [Updated on 2018-12-27: Add bbox regression and tricks sections for R-CNN.]
In the series of &amp;ldquo;Object Detection for Dummies&amp;rdquo;, we started with basic concepts in image processing, such as gradient vectors and HOG, in Part 1. Then we introduced classic convolutional neural network architecture designs for classification and pioneer models for object recognition, Overfeat and DPM, in Part 2.</description>
    </item>
    
    <item>
      <title>Object Detection for Dummies Part 2: CNN, DPM and Overfeat</title>
      <link>https://wuxb09.github.io/test-lilian/posts/2017-12-15-object-recognition-part-2/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wuxb09.github.io/test-lilian/posts/2017-12-15-object-recognition-part-2/</guid>
      <description>Part 1 of the &amp;ldquo;Object Detection for Dummies&amp;rdquo; series introduced: (1) the concept of image gradient vector and how HOG algorithm summarizes the information across all the gradient vectors in one image; (2) how the image segmentation algorithm works to detect regions that potentially contain objects; (3) how the Selective Search algorithm refines the outcomes of image segmentation for better region proposal.
In Part 2, we are about to find out more on the classic convolution neural network architectures for image classification.</description>
    </item>
    
    <item>
      <title>Object Detection for Dummies Part 1: Gradient Vector, HOG, and SS</title>
      <link>https://wuxb09.github.io/test-lilian/posts/2017-10-29-object-recognition-part-1/</link>
      <pubDate>Sun, 29 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wuxb09.github.io/test-lilian/posts/2017-10-29-object-recognition-part-1/</guid>
      <description>I&amp;rsquo;ve never worked in the field of computer vision and has no idea how the magic could work when an autonomous car is configured to tell apart a stop sign from a pedestrian in a red hat. To motivate myself to look into the maths behind object recognition and detection algorithms, I&amp;rsquo;m writing a few posts on this topic &amp;ldquo;Object Detection for Dummies&amp;rdquo;. This post, part 1, starts with super rudimentary concepts in image processing and a few methods for image segmentation.</description>
    </item>
    
  </channel>
</rss>
